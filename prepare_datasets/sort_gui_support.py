#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Mar 30, 2018 09:48:19 PM

# gui to sort and relabel samples from dataset

import sys
import numpy as np
import cv2

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

current_sample_id = 0
forwards_arr = []
lefts_arr = []
rights_arr = []


def load_forwards_dataset():
    global loaded_dataset
    global current_sample_id
    loaded_dataset = np.load("../datasets/only_forwards.npy")
    print('Loaded only_forwards dataset, Length is: ', len(loaded_dataset))
    sys.stdout.flush()
    load_sample()


def load_lefts_dataset():
    global loaded_dataset
    global current_sample_id
    loaded_dataset = np.load("../datasets/only_lefts.npy")
    print('Loaded only_lefts dataset, Length is: ', len(loaded_dataset))
    sys.stdout.flush()
    load_sample()


def load_rights_dataset():
    global loaded_dataset
    global current_sample_id
    loaded_dataset = np.load("../datasets/only_rights.npy")
    print('Loaded only_rights dataset, Length is: ', len(loaded_dataset))
    sys.stdout.flush()
    load_sample()


def load_sample():  # load a sample from dataset
    global image_data
    global label_data
    image_data = loaded_dataset[current_sample_id, 0]
    label_data = loaded_dataset[current_sample_id, 1]

    if label_data == [0, 1, 0]:  # forward only
        print(current_sample_id, ": ", label_data)

    elif label_data == [1, 1, 0]:  # forward left
        print(current_sample_id, ": ", label_data)

    elif label_data == [0, 1, 1]:  # forward right
        print(current_sample_id, ": ", label_data)
    display_image(image_data)


def display_image(image):
    global current_sample_id
    cv2.imshow("Image", image)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        cv2.destroyAllWindows()


def check_sorted_samples():  # check how many samples have been sorted and relabeled
    print("----------")
    print("lefts: ", len(lefts_arr))
    print("rights: ", len(rights_arr))
    print("forwards: ", len(forwards_arr))
    print("----------")


def set_forward():    # relabel sample as forward
    global good_forwards_arr
    global label_data
    label_data == [0, 1, 0]
    good_forwards_arr.append([image_data, label_data])
    next_sample()


def set_left():    # relabel sample as left
    global good_lefts_arr
    global label_data
    label_data == [1, 0, 0]
    good_lefts_arr.append([image_data, label_data])
    next_sample()


def set_right():    # relabel sample as right
    global good_rights_arr
    global label_data
    label_data == [0, 0, 1]
    good_rights_arr.append([image_data, label_data])
    next_sample()


def next_sample():
    global current_sample_id
    current_sample_id = current_sample_id + 1
    load_sample()


def prev_sample():
    global current_sample_id
    current_sample_id = current_sample_id - 1
    load_sample()


def save_as_separate_dataset():     # save datasets of relabeled samples
    np.save('forwards.npy', forwards_arr)
    np.save('lefts.npy', lefts_arr)
    np.save('rights.npy', rights_arr)
    print('sort_gui_support.save_as_separate_dataset')
    sys.stdout.flush()


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import sort_gui

    loaded_dataset = []

    image_data = 0
    label_data = [0, 0, 0]
    sort_gui.vp_start_gui()     # start gui
